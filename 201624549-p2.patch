diff -urN ./xv6-pnu-p2/defs.h ./xv6-pnu-201624549/defs.h
--- ./xv6-pnu-p2/defs.h	2019-04-04 11:16:13.000000000 +0900
+++ ./xv6-pnu-201624549/defs.h	2020-04-29 16:07:13.000000000 +0900
@@ -120,6 +120,9 @@
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int		setnice(int pid, int priority);
+int		getnice(int pid);
+void		ps(int);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff -urN ./xv6-pnu-p2/exec.c ./xv6-pnu-201624549/exec.c
--- ./xv6-pnu-p2/exec.c	2019-04-04 11:16:13.000000000 +0900
+++ ./xv6-pnu-201624549/exec.c	2020-04-29 00:02:10.000000000 +0900
@@ -99,6 +99,7 @@
   curproc->sz = sz;
   curproc->tf->eip = elf.entry;  // main
   curproc->tf->esp = sp;
+  curproc->priority = 2;
   switchuvm(curproc);
   freevm(oldpgdir);
   return 0;
diff -urN ./xv6-pnu-p2/Makefile ./xv6-pnu-201624549/Makefile
--- ./xv6-pnu-p2/Makefile	2019-04-04 13:20:47.000000000 +0900
+++ ./xv6-pnu-201624549/Makefile	2020-04-29 19:53:38.000000000 +0900
@@ -181,6 +181,11 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_test1\
+	_test2\
+	_test3\
+	_test4\
+	_minitop\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -250,7 +255,7 @@
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
+	printf.c umalloc.c types.h\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
diff -urN ./xv6-pnu-p2/minitop.c ./xv6-pnu-201624549/minitop.c
--- ./xv6-pnu-p2/minitop.c	1970-01-01 09:00:00.000000000 +0900
+++ ./xv6-pnu-201624549/minitop.c	2020-04-29 20:33:27.000000000 +0900
@@ -0,0 +1,12 @@
+#include "user.h"
+#include "stat.h"
+#include "types.h"
+
+int
+main(int args, char *argv[])
+{
+   int pid;
+   pid = atoi(argv[1]);
+   ps(pid);
+   exit();
+}
Binary files ./xv6-pnu-p2/_nice and ./xv6-pnu-201624549/_nice differ
diff -urN ./xv6-pnu-p2/nice.c ./xv6-pnu-201624549/nice.c
--- ./xv6-pnu-p2/nice.c	1970-01-01 09:00:00.000000000 +0900
+++ ./xv6-pnu-201624549/nice.c	2020-04-29 13:28:24.000000000 +0900
@@ -0,0 +1,24 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fcntl.h"
+
+int
+main(int argc, char *argv[])
+{
+   int priority, pid;
+
+   if(argc <3) {
+      printf(2, "Usage: nice pid priority\n");
+      exit();
+   }
+   pid = atoi(argv[1]);
+   priority = atoi(argv[2]);
+   if(priority < 0 || priority > 40) {
+      printf(2, "Invalid priority (0-40)!\n");
+      exit();
+   }
+   printf(1, "pid = %d, pr=%d\n", pid, priority);
+   chpr(pid, priority);
+   exit();
+}
diff -urN ./xv6-pnu-p2/proc.c ./xv6-pnu-201624549/proc.c
--- ./xv6-pnu-p2/proc.c	2019-04-04 11:16:13.000000000 +0900
+++ ./xv6-pnu-201624549/proc.c	2020-04-29 20:28:44.000000000 +0900
@@ -88,7 +88,7 @@
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-
+  p->priority = 20;
   release(&ptable.lock);
 
   // Allocate kernel stack.
@@ -199,6 +199,7 @@
   np->sz = curproc->sz;
   np->parent = curproc;
   *np->tf = *curproc->tf;
+//  np->priority = np->parent->priority;
 
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
@@ -323,12 +324,14 @@
 scheduler(void)
 {
   struct proc *p;
+  struct proc *p1;
   struct cpu *c = mycpu();
   c->proc = 0;
   
   for(;;){
     // Enable interrupts on this processor.
     sti();
+    struct proc *highP = 0;
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
@@ -336,9 +339,20 @@
       if(p->state != RUNNABLE)
         continue;
 
+      highP = p;
+      //choose one with highest priority
+      for(p1 = ptable.proc; p1< &ptable.proc[NPROC]; p1++){
+        if(p1->state != RUNNABLE)
+	   continue;
+	if( highP->priority > p1->priority)
+	   highP = p1;
+	}
+
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
+      p = highP;
+      switchuvm(p);
       c->proc = p;
       switchuvm(p);
       p->state = RUNNING;
@@ -532,3 +546,75 @@
     cprintf("\n");
   }
 }
+//change priority
+int
+setnice(int pid, int priority)
+{
+   struct proc *p;
+
+   acquire(&ptable.lock);
+   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->pid == pid) {
+         p->priority = priority;
+         break;
+      }
+   }
+   release(&ptable.lock);
+   return pid;
+}
+
+int
+getnice(int pid)
+{   
+   struct proc *p;
+   int priority= -1;
+   acquire(&ptable.lock);
+   for(p = ptable.proc; p< &ptable.proc[NPROC]; p++){
+      if(p->pid == pid){
+         priority = p->priority;
+         break;
+      }
+   }
+   release(&ptable.lock);
+   return priority;
+}
+
+void
+ps(int pid)
+{
+   char *states[] = {
+	[UNUSED] 	"unused",
+	[EMBRYO] 	"embryo",
+	[SLEEPING]	"sleep ",
+	[RUNNABLE] 	"runble",
+	[RUNNING]	"run   ",
+	[ZOMBIE]	"zombie"
+	};
+   struct proc *p;
+   char *state;
+  
+   cprintf("pid  ppid  prio  state  name \n");
+   if(pid==0){
+      for(p= ptable.proc; p<&ptable.proc[NPROC]; p++){
+	if(p->pid >=0 && p->state < NELEM(states) && states[p->state] ){
+         cprintf("%d  %d  %d  ", p->pid , p->parent->pid, p->priority);
+         if(p->state == UNUSED){
+            continue;
+         }else if(p->state == EMBRYO){
+            state = states[1];
+         }else if(p->state ==SLEEPING){
+            state = states[2];
+	 }else if(p->state == RUNNABLE){
+	    state = states[3];
+	 }else if(p->state == RUNNING){
+	    state = states[4];
+ 	 }else if(p->state == ZOMBIE){
+	    state = states[5];
+	 }else{
+	    state = "???";
+	 }
+	 cprintf("%s  %s\n",state,p->name);
+      }
+    }
+   }
+}
diff -urN ./xv6-pnu-p2/proc.h ./xv6-pnu-201624549/proc.h
--- ./xv6-pnu-p2/proc.h	2019-04-04 11:16:13.000000000 +0900
+++ ./xv6-pnu-201624549/proc.h	2020-04-29 18:10:46.000000000 +0900
@@ -49,6 +49,7 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int priority;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff -urN ./xv6-pnu-p2/syscall.c ./xv6-pnu-201624549/syscall.c
--- ./xv6-pnu-p2/syscall.c	2019-04-04 11:17:39.000000000 +0900
+++ ./xv6-pnu-201624549/syscall.c	2020-04-29 16:17:30.000000000 +0900
@@ -104,6 +104,9 @@
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_yield(void);
+extern int sys_setnice(void);
+extern int sys_getnice(void);
+extern int sys_ps(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -128,6 +131,9 @@
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_yield]   sys_yield,
+[SYS_setnice] sys_setnice,
+[SYS_getnice] sys_getnice,
+[SYS_ps]      sys_ps,
 };
 
 void
diff -urN ./xv6-pnu-p2/syscall.h ./xv6-pnu-201624549/syscall.h
--- ./xv6-pnu-p2/syscall.h	2019-04-04 11:18:03.000000000 +0900
+++ ./xv6-pnu-201624549/syscall.h	2020-04-29 16:12:45.000000000 +0900
@@ -21,3 +21,6 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_yield  22
+#define SYS_setnice   23
+#define SYS_getnice 24
+#define SYS_ps 25
diff -urN ./xv6-pnu-p2/sysproc.c ./xv6-pnu-201624549/sysproc.c
--- ./xv6-pnu-p2/sysproc.c	2019-04-04 11:19:03.000000000 +0900
+++ ./xv6-pnu-201624549/sysproc.c	2020-04-29 16:20:16.000000000 +0900
@@ -96,4 +96,33 @@
   yield();
   return 0;
 }
+int
+sys_setnice(void)
+{
+   int pid, pr;
+   if(argint(0,&pid) < 0)
+      return -1;
+   if(argint(1, &pr) < 0)
+      return -1;
 
+   return setnice(pid, pr);
+}
+int
+sys_getnice(void)
+{
+   int pid;
+   if(argint(0,&pid) <0)
+      return -1;
+   return getnice(pid);
+}
+
+void
+sys_ps(void)
+{
+   int pid;
+   if(argint(0,&pid)<0){
+   }
+   else{
+      ps(pid);
+   }
+}
diff -urN ./xv6-pnu-p2/user.h ./xv6-pnu-201624549/user.h
--- ./xv6-pnu-p2/user.h	2019-04-04 11:19:50.000000000 +0900
+++ ./xv6-pnu-201624549/user.h	2020-04-29 19:53:31.000000000 +0900
@@ -1,3 +1,4 @@
+#include "types.h"
 struct stat;
 struct rtcdate;
 
@@ -24,6 +25,9 @@
 int sleep(int);
 int uptime(void);
 void yield(void);
+int setnice(int pid, int priority);
+int getnice(int pid);
+void ps(int pid);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff -urN ./xv6-pnu-p2/usys.S ./xv6-pnu-201624549/usys.S
--- ./xv6-pnu-p2/usys.S	2019-04-04 11:25:04.000000000 +0900
+++ ./xv6-pnu-201624549/usys.S	2020-04-29 16:16:02.000000000 +0900
@@ -30,3 +30,6 @@
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(yield)
+SYSCALL(setnice)
+SYSCALL(getnice)
+SYSCALL(ps)
